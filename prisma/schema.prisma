generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Data Models
model Account {
  id                String  @id @unique @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @unique @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String             @id @unique @default(cuid())
  name          String?
  email         String?            @unique
  phone         String?
  branch        String?
  year          Int?
  username      String?            @unique
  emailVerified DateTime?
  image         String?
  role          String?            @default("user")
  bio           String?            @db.Text
  links         String?            @db.Text
  isMember      Boolean            @default(false)
  isAdmin       Boolean            @default(false)
  teamId        Int?
  Team          Team?              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  accounts      Account[]
  sessions      Session[]
  Certificate   Certificate[]
  Registrations Registrations?
  Events        EventParticipant[]

  @@index([teamId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Members {
  email String  @unique
  name  String?
  batch Int?
}

model Team {
  id          Int    @id @unique @default(autoincrement())
  name        String @unique
  description String
  Task        Task[]
  members     User[]
}

model Task {
  id          Int      @id @unique @default(autoincrement())
  name        String
  description String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  teamId      Int
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model RegistrationPayment {
  id          Int      @id @unique @default(autoincrement())
  userId      String
  orderId     String   @unique
  amount      Float
  paid        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  paymentData Json?
}

model Core {
  id       Int        @id @unique @default(autoincrement())
  name     String
  role     Role
  img      String
  github   String?
  linkedin String?
  filter   CoreFilter
}

model Event {
  id           Int                @id @unique @default(autoincrement())
  name         String
  date         DateTime
  isAvailable  Boolean            @default(true)
  attended     Int
  type         EventTypes
  images       Json?
  organizer    String
  description  String             @db.Text
  amount       Int?               @default(0)
  filter       EventFilter
  Certificate  Certificate[]
  Participants EventParticipant[]
}

model Certificate {
  id      String           @id @unique @default(cuid())
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  date    DateTime         @default(now())
  type    CertificateTypes
  event   Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int
  desc    String?          @db.Text

  @@index([eventId])
  @@index([userId])
}

model Registrations {
  id           Int    @id @unique @default(autoincrement())
  User         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String @unique
  languages    Json
  skills       Json
  whyJoin      String @db.Text
  expectations String @db.Text
  yearOfReg    Int

  @@index([userId])
}

// Event registrations model
model EventParticipant {
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@id([userId, eventId])
  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

// Enums
enum Role {
  Principal
  AssistantProfessor
  Mentor
  President
  VicePresident
  Secretary
  JointSecretary
  Treasurer
  DocumentationHead
  PublicityHead
  EventsHead
  EventsCoHead
  TalentAcquisitionHead
  TechnicalHead
  DigitalTechLead
  EthicalHackingHead
  ProgramAdvisor
  ProgramLead
  GraphicsHead
  GraphicsCoHead
  SocialMediaHead
  SocialMediaCoHead
  ContentHead
  ContentCoHead
  GraphicsTeam
  CompetitiveProgrammingLead
  SocialMediaTeam
  ContentTeam
  TechnicalContentHead
  TechnicalTeam
  CoreMember
  OperationsManager
  LeadDeveloper
  FrontendLead
  BackendLead
  CPAdvisors
  CPTeamMember
  AppDomainHead
  AIMLDomainHead
  EventLead
  Photographer
  Videographer
}

enum CoreFilter {
  Year2017to2020
  Year2020to2021
  Year2021to2022
  Year2022to2023
  Year2023to2024
  Faculty
}

enum EventTypes {
  Workshop
  Seminar
  Gaming
  Talk
  CyberSecurity
  OpenSource
  AndroidDevelopment
  WebDevelopment
  Hackathon
  CodingContest
}

enum EventFilter {
  Year2017to2020
  Year2020to2021
  Year2021to2022
  Year2022to2023
  Year2023to2024
}

enum CertificateTypes {
  TeamParticipation
  SoloParticipation
  Winner
  RunnerUp
  SpecialRecognition
}
